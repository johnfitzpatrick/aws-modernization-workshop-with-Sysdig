<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Main Page on AWS Modernization Workshop with Sysdig</title>
    <link>//localhost:1313/</link>
    <description>Recent content in Main Page on AWS Modernization Workshop with Sysdig</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create an AWS account</title>
      <link>//localhost:1313/10_prerequisites/14_self_paced/account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/10_prerequisites/14_self_paced/account.html</guid>
      <description>Your account must have the ability to create new IAM roles and scope other IAM permissions.
  If you don&amp;rsquo;t already have an AWS account with Administrator access: create one now by clicking here
 Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop</description>
    </item>
    
    <item>
      <title>Workshop Overview</title>
      <link>//localhost:1313/00_introduction/01_workshop_overview.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/00_introduction/01_workshop_overview.html</guid>
      <description>In this workshop, you will learn how image scanning can provide the security insights you need without affecting the level of flexibility you desire.
In particular, we&amp;rsquo;ll guide you on how to implement ECS Fargate image scanning with Sysdig Secure. The resulting solution will automatically scan any container image instance that is executed, and will warn you with reports about any vulnerabilities or misconfigurations in your workload. It will do this without leaving your AWS workflow, and without data leaving your AWS infrastructure.</description>
    </item>
    
    <item>
      <title>Security basics</title>
      <link>//localhost:1313/00_introduction/02_security_basics.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/00_introduction/02_security_basics.html</guid>
      <description>It is extremely important to maintain a high level of security in your entire application environment. Not doing so can result in your system being compromised. This can incur significant costs and can lead to commercial &amp;amp; business issues, and failed compliance tests leading to a loss of trust with customers and monetary fines and/or settlement fees.
In a cloud native environment, the security of your application is dependent largely upon the security of your containers, but not exclusively - it also depends upon the infrastructure upon which it runs.</description>
    </item>
    
    <item>
      <title>Image Scanning</title>
      <link>//localhost:1313/00_introduction/03_image_scanning.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/00_introduction/03_image_scanning.html</guid>
      <description>Sysdig&amp;rsquo;s ImageVision provides a comprehensive suite of tools to enhance security across your application&amp;rsquo;s ecosystem. One critical part of this is scanning the images in your registry.
An image scanner inspects a container&amp;rsquo;s content to detect threats such as unencrypted passwords, known vulnerabilities, exposed ports, etc. You can implement scanning best practices on several phases of your DevOps pipeline, blocking threats before they are deployed into production, and without adding extra overhead.</description>
    </item>
    
    <item>
      <title>Infrastructure Runtime Security</title>
      <link>//localhost:1313/00_introduction/04_infra_runtime_sec.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/00_introduction/04_infra_runtime_sec.html</guid>
      <description>In the same way image scanning gives you visibility of vulnerabilities and threats pertaining specifically to an application&amp;rsquo;s containers, infrastructure scanning gives visibility of potential issues emanating from the environment on which these containers run.
AWS provides a rich environment upon which to base your application, but it&amp;rsquo;s not without its risks. There are many places where bad actors can create harm, for example exposing data by making S3 buckets public, deleting bucket encryption, disabling MFA for an account, adding/removing IAM policies.</description>
    </item>
    
    <item>
      <title>AWS Fargate and ECS Security</title>
      <link>//localhost:1313/00_introduction/05_fargate_ecs_sec.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/00_introduction/05_fargate_ecs_sec.html</guid>
      <description>AWS Fargate and ECS allow you to deploy containerized workloads quickly. Those services are so convenient that many people leave them unattended, risking exposure to vulnerabilities inside their containers that can exfiltrate secrets, compromise business data, impact performance, and increase their AWS costs.
For example, think of some credentials mistakenly included in an image, later deployed on Fargate. They will be exposed to anyone with access to the image (think on the repository), or to the Fargate service.</description>
    </item>
    
    <item>
      <title>Sign-up for a Sysdig Trial account</title>
      <link>//localhost:1313/10_prerequisites/11_sysdig.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/10_prerequisites/11_sysdig.html</guid>
      <description>You need a Sysdig Secure account and the associated API token
 Sign-up for a free Sysdig trial here https://sysdig.com/company/free-trial/
 You will receive a confirmation email with a link Once registered, log in and click your initials on the left nav bar, click &amp;lsquo;Settings&amp;rsquo; and navigate to &amp;lsquo;User Profile&amp;rsquo; and make a note of your &amp;lsquo;Sysdig Secure API Token&amp;rsquo;.  </description>
    </item>
    
    <item>
      <title>Start the Workshop...</title>
      <link>//localhost:1313/10_prerequisites/12_start_workshop.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/10_prerequisites/12_start_workshop.html</guid>
      <description>Getting Started To start the workshop, follow one of the following depending on whether you are&amp;hellip;
 &amp;hellip;attending an AWS hosted event, or &amp;hellip;running the workshop on your own  Once you have completed with either setup, continue with Install the required tools</description>
    </item>
    
    <item>
      <title>Cloud9</title>
      <link>//localhost:1313/20_workshop_setup/20_cloud9.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/20_workshop_setup/20_cloud9.html</guid>
      <description>AWS Cloud9 is a cloud-based integrated development environment (IDE) that Let’s you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes prepackaged with essential tools for popular programming languages, including JavaScript, Python, PHP, and more, so you don’t need to install files or configure your development machine to start new projects.
Add a new Cloud9 IDE environment 1 .</description>
    </item>
    
    <item>
      <title>Create an IAM role for your workspace</title>
      <link>//localhost:1313/20_workshop_setup/21_iamrole.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/20_workshop_setup/21_iamrole.html</guid>
      <description>Starting from here, when you see command to be entered such as below, you will enter these commands into Cloud9 IDE. You can use the Copy to clipboard feature (right hand upper corner) to simply copy and paste into Cloud9. In order to paste, you can use Ctrl + V for Windows or Command + V for Mac.
  Follow this deep link to create an IAM role with Administrator access.</description>
    </item>
    
    <item>
      <title>Attach the IAM role to your Workspace</title>
      <link>//localhost:1313/20_workshop_setup/22_workspaceiam.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/20_workshop_setup/22_workspaceiam.html</guid>
      <description> Follow this deep link to find your Cloud9 EC2 instance Select the instance, then choose Actions / Instance Settings / Attach/Replace IAM Role  Choose Sysdig-Workshop-Admin from the IAM Role drop down, and select Apply  </description>
    </item>
    
    <item>
      <title>Update IAM settings for your Workspace</title>
      <link>//localhost:1313/20_workshop_setup/23_cloud.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/20_workshop_setup/23_cloud.html</guid>
      <description>Cloud9 normally manages IAM credentials dynamically. This isn&amp;rsquo;t currently compatible with the EKS IAM authentication, so we will disable it and rely on the IAM role instead.
  Return to your workspace and click the gear icon (in top right corner), or click to open a new tab and choose &amp;ldquo;Open Preferences&amp;rdquo; Select AWS SETTINGS Turn off AWS managed temporary credentials Close the Preferences tab   Let&amp;rsquo;s run the command below, the following actions will take place as we do that:</description>
    </item>
    
    <item>
      <title>Setup Amazon ECR Registry</title>
      <link>//localhost:1313/30_module_1/30_setup_ecr.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/30_module_1/30_setup_ecr.html</guid>
      <description>For the purposes of this lab you need to create an Amazon ECR registry. To do this, follow the steps below
 Log into your Cloud9 Workspace
 Run the following commands, naming it as appropriate
  aws ecr create-repository --repository-name aws-workshop --image-scanning-configuration scanOnPush=true  The output will be as follows
{ &amp;quot;repository&amp;quot;: { &amp;quot;repositoryArn&amp;quot;: &amp;quot;arn:aws:ecr:us-east-1:845151661675:repository/aws-workshop&amp;quot;, &amp;quot;registryId&amp;quot;: &amp;quot;845151661675&amp;quot;, &amp;quot;repositoryName&amp;quot;: &amp;quot;aws-workshop&amp;quot;, &amp;quot;repositoryUri&amp;quot;: &amp;quot;845151661675.dkr.ecr.us-east-1.amazonaws.com/aws-workshop&amp;quot;, &amp;quot;createdAt&amp;quot;: 1602848100.0, &amp;quot;imageTagMutability&amp;quot;: &amp;quot;MUTABLE&amp;quot;, &amp;quot;imageScanningConfiguration&amp;quot;: { &amp;quot;scanOnPush&amp;quot;: true }, &amp;quot;encryptionConfiguration&amp;quot;: { &amp;quot;encryptionType&amp;quot;: &amp;quot;AES256&amp;quot; } } }  Set up Credentials in Command line Docker Shortly you will use your Cloud9 Workspace to create and push a docker container to your new ECR Repository, however, before doing so you must configure docker&amp;rsquo;s access to the repository.</description>
    </item>
    
    <item>
      <title>Deploy the Amazon ECR Integration</title>
      <link>//localhost:1313/30_module_1/31_deploy_ecr_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/30_module_1/31_deploy_ecr_integration.html</guid>
      <description>This integration enables the Amazon Elastic Container Registry (ECR) to automatically trigger an action to scan every new container that is pushed into the registry.
 Log into your AWS Console and select &amp;lsquo;US East (N. Virginia) us-east-1&amp;rsquo; from the &amp;lsquo;Select a Region&amp;rsquo; dropdown on the top right. For the purposes of this exercise we will be using AWS Region us-east-1
 Navigate to this CloudFormation template.  Click Next.  For &amp;lsquo;ScanningType&amp;rsquo; make sure the default value of &amp;lsquo;Inline&amp;rsquo; is selected</description>
    </item>
    
    <item>
      <title>Push and Scan an Image from the Registry</title>
      <link>//localhost:1313/30_module_1/32_image_from_registry.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/30_module_1/32_image_from_registry.html</guid>
      <description>Download Example Dockerfile and Sources To illustrate the images scanning we will build an example Node.JS application based on the official “hello world” example described in their website.
 Go to your Cloud9 Workspace and download and uncompress example container files
wget https://github.com/sysdiglabs/hello-world-node-vulnerable/releases/download/v1.0/hello-world-node-vulnerable.zip unzip hello-world-node-vulnerable.zip cd hello-world-node-vulnerable/  And build and push the image to ECR
export IMAGE=$AWS_ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$ECR_NAME docker build . -t $IMAGE docker push $IMAGE  Check that an image scan is automatically triggered  Once complete you will see that this image has some issues  As soon as the image finishes being pushed to the registry, a new Amazon CodeBuild pipeline will be automatically created that executes an image scan.</description>
    </item>
    
    <item>
      <title>Modify the image and trigger a second scan</title>
      <link>//localhost:1313/30_module_1/33_image_rescan.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/30_module_1/33_image_rescan.html</guid>
      <description>For illustration purposes, let&amp;rsquo;s rebuild our image and make it more secure by starting with a different Base image. To do so:
 Go back into Cloud9 Workspace Edit the Dockerfile and in the first line update the base image from
FROM node:12  to
FROM bitnami/node:12`  The file should look like this
FROM bitnami/node:12 # Create app directory WORKDIR /usr/src/app # Install app dependencies # A wildcard is used to ensure both package.</description>
    </item>
    
    <item>
      <title>Install Amazon ECS CLI</title>
      <link>//localhost:1313/40_module_2/40_install_amazon_ecs_cli.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/40_module_2/40_install_amazon_ecs_cli.html</guid>
      <description>We will use the Amazon ECS CLI tool to deploy an example ECS cluster, so we&amp;rsquo;ll need to install it on our Cloud9 Workspace. To install Amazon ECS CLI, follow the steps below
 Log into your Cloud9 Workspace
 Download the Amazon ECS CLI binary and make it executable .
sudo curl -Lo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest sudo chmod +x /usr/local/bin/ecs-cli  Check installation
ecs-cli --version  Now create a file named task-execution-assume-role.</description>
    </item>
    
    <item>
      <title>Deploy Sysdig Secure Automatic Image Scanner for Fargate</title>
      <link>//localhost:1313/40_module_2/41_deploy_image_scanner_for_fargate.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/40_module_2/41_deploy_image_scanner_for_fargate.html</guid>
      <description>To deploy the Sysdig image scanner for Fargate, we&amp;rsquo;ll again use Amazon CloudFormation. The procedure is identical to how we installed Amazon ECR Integration in the previous lab, so this time we&amp;rsquo;ll use the AWS CLI instead.
Note You can find instructions on using the CLI on the Sysdig Fargate scanning installation page
 First we&amp;rsquo;ll set a couple of environment parameters to simplify the actual aws command,
APIToken=&amp;quot;F4k3F4k3-F4k3-F4k3-F4k3-F4k3F4k3F4k3&amp;quot; CFURI=&amp;quot;https://cf-templates-secure-scanning-ecs.s3.amazonaws.com/ecs-image-scanning.template&amp;quot;  Then run the the following AWS CloudFormation command (which uses those environment parameters)</description>
    </item>
    
    <item>
      <title>Deploy an ECS cluster using Fargate</title>
      <link>//localhost:1313/40_module_2/42_deploy_an_ecs_cluster.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/40_module_2/42_deploy_an_ecs_cluster.html</guid>
      <description>To illustrate the automatic scanning, we will now deploy a sample ECS cluster that scales using Fargate
 Create a cluster configuration and create a cluster
ecs-cli configure --cluster tutorial --default-launch-type FARGATE --config-name tutorial --region us-east-1 ecs-cli up --cluster-config tutorial --ecs-profile tutorial-profile  The output should show a VPC and two Subnets have been created:-
INFO[0000] Created cluster cluster=tutorial region=us-east-1 INFO[0000] Waiting for your cluster resources to be created... INFO[0000] Cloudformation stack status stackStatus=CREATE_IN_PROGRESS INFO[0060] Cloudformation stack status stackStatus=CREATE_IN_PROGRESS VPC created: vpc-046ed77edcd796e19 Subnet created: subnet-045df8f58a51b2291 Subnet created: subnet-0e4623283c4907ea7 Cluster creation succeeded.</description>
    </item>
    
    <item>
      <title>Initiate CodeBuild Pipelines Build and Scan</title>
      <link>//localhost:1313/40_module_2/43_initiate_scan.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/40_module_2/43_initiate_scan.html</guid>
      <description>Now go to CodeBuild &amp;gt; Build projects and see the task in progress.  TRAINING NOTE: Recheck the following steps &amp;amp; screens in live environment - need to fix Cloud9 issues first</description>
    </item>
    
    <item>
      <title>View Results on Sysdig Secure Dashboard</title>
      <link>//localhost:1313/40_module_2/44_sysdig_secure_dashboard.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/40_module_2/44_sysdig_secure_dashboard.html</guid>
      <description>The beauty of the Amazon ECS Fargate with Sysdig is that you have a centralised location to report on your scanning results.
 Log into Sysdig Secure, and Browse to &amp;lsquo;Image Scanning &amp;gt; Scan Results&amp;rsquo;.
 You can drill into TRAINING NOTE: UPDATE INSTRUCTION WHEN GRABBING FINAL SCREENSHOT
  </description>
    </item>
    
    <item>
      <title>Setup CloudTrail Runtime Security</title>
      <link>//localhost:1313/50_module_3/51_setup_cloudtrail_runtime_security.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/50_module_3/51_setup_cloudtrail_runtime_security.html</guid>
      <description>If you followed this workshop from the beginning then you should have deployed the CloudTrail CloudFormation Template earlier. If you didn&amp;rsquo;t, then go back and complete this step now Setup CloudTrail Runtime Security, however please note that this can take up to ten minutes to complete.
To check it has been deployed successfully, navigate to https://console.aws.amazon.com/cloudformation/ and search for CloudConnector. You should see it&amp;rsquo;s status is CREATE_COMPLETE.</description>
    </item>
    
    <item>
      <title>Detecting Runtime Cloud Security Threats</title>
      <link>//localhost:1313/50_module_3/52_detecting_runtime_cloud_security_threats.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/50_module_3/52_detecting_runtime_cloud_security_threats.html</guid>
      <description>Let&amp;rsquo;s look at an example of AWS threat detection in action with CloudTrail and the Sysdig Cloud Connector. To do so we&amp;rsquo;ll create an S3 bucket, and make it public
 Log into Cloud9 Workspace Create an S3 bucket. S3 bucketnames are globally unique, so you use your initials combined with a timestamp
INITIALS=&amp;lt;your initial&amp;gt; BUCKETNAME=$INITIALS-$(date +%s) aws s3api create-bucket --bucket $BUCKETNAME --acl public-read  Now delete the S3 bucket&amp;rsquo;s encryption.</description>
    </item>
    
    <item>
      <title>Checking Security Findings in AWS Security Hub</title>
      <link>//localhost:1313/50_module_3/53_checking_security_findings_in_the_aws_security_hub.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/50_module_3/53_checking_security_findings_in_the_aws_security_hub.html</guid>
      <description>You can check these events without leaving the AWS console. This is how findings reported by Sysdig Cloud Connector look in the AWS Security Hub:
 Browse to Security Hub and click &amp;lsquo;Findings&amp;rsquo; on the left.  The details of one of these findings provide all the information you need to take immediate action:
And they appear in JSON format in AWS CloudWatch log streams:</description>
    </item>
    
    <item>
      <title>Modifying a Falco Rule for CloudTrail</title>
      <link>//localhost:1313/50_module_3/54_modifying_a_falco_rule_for_cloudtrail10module_2_fargate_automatic_image_scanning.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/50_module_3/54_modifying_a_falco_rule_for_cloudtrail10module_2_fargate_automatic_image_scanning.html</guid>
      <description>Using Sysdig Cloud Connector, you are not limited to the out-of-the-box rules provided. You can modify existing rules, or write your own tailored to your own needs.
Let’s try first modifying a rule. The following rule checks if a resource is created in a region that you are not usually using. But to be active, you have to specify which regions you want to detect.
- list: disallowed_aws_regions items: [] - rule: AWS command executed on unused region desc: Detect AWS command execution on unused regions condition: not jevt.</description>
    </item>
    
    <item>
      <title>Installing the CloudConnector</title>
      <link>//localhost:1313/25_setup_cloudtrail_integration/241_enable_aws_security_hub.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/25_setup_cloudtrail_integration/241_enable_aws_security_hub.html</guid>
      <description>Step 1. Enable AWS Security Hub To enable AWS Security Hub:
 Log into your Cloud9 Workspace
 Run the following command
aws securityhub enable-security-hub --enable-default-standards  Log into your AWS account with your browser then browse to AWS Security Hub.
   You may see a temporary red warning about AWS Config not being appropriately enabled, but it will disappear on its own once the Security Hub detects that the activation has been made.</description>
    </item>
    
    <item>
      <title></title>
      <link>//localhost:1313/25_setup_cloudtrail_integration/__242_install_cloudconnector.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/25_setup_cloudtrail_integration/__242_install_cloudconnector.html</guid>
      <description>Installing the CloudConnector To install this tool, we will be using a CloudFormation Template. Follow the steps below to install the Sysdig CloudConnector:
 Navigate to the CloudFormation template for Sysdig Cloud Connector deployment template. The template will preview in CloudFormation.  On the “Create stack” section, click the &amp;lsquo;Next&amp;rsquo; button to start setting up the template.  The “Specify stack details” section has no parameters for you to configure, so you can just press the Next button.</description>
    </item>
    
  </channel>
</rss>